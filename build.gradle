buildscript {
	repositories {
		jcenter()
	}

	dependencies {
		classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.6'
	}
}

ext {
	verGwt = '2.8.0-beta1'
	verJersey = '2.19'
	verGuice = '4.0'
	verSwagger = '1.5.9'

	dockerDir = "$projectDir/docker"
}

apply plugin: 'java'
apply plugin: 'gwt'
apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'eclipse'
apply plugin: 'idea'

task wrapper(type: Wrapper) {
	gradleVersion = '2.13'
}

repositories {
	mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
	compile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
	compile group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.0.1'

	compile group: 'com.google.inject', name: 'guice', version: verGuice
	compile group: 'com.google.inject.extensions', name: 'guice-servlet', version: verGuice
	compile group: 'com.google.inject.extensions', name: 'guice-persist', version: verGuice
	compile group: 'com.squarespace.jersey2-guice', name: 'jersey2-guice', version: '0.10'
	compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet', version: verJersey
	compile group: 'org.glassfish.jersey.core', name: 'jersey-server', version: verJersey
	compile group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: verJersey
	//compile group: 'org.glassfish.jersey.ext', name: 'jersey-bean-validation', version: verJersey
	compile group: 'io.swagger', name: 'swagger-jersey2-jaxrs', version: verSwagger
	compile group: 'io.swagger', name: 'swagger-jaxrs', version: verSwagger
	compile group: 'org.mybatis', name: 'mybatis', version: '3.3.1'
	compile group: 'org.mybatis', name: 'mybatis-guice', version: '3.7.1'
	compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.8.11.2'
	compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.13'

	// needed by GWT during compilation but not after that
	compileOnly group: 'org.fusesource.restygwt', name: 'restygwt', version: '2.0.3'

	gwt group: 'com.allen-sauer.gwt.log', name: 'gwt-log', version: '3.3.2'
	gwt group: 'com.allen-sauer.gwt.dnd', name: 'gwt-dnd', version: '3.3.4'
	gwt (group: 'com.google.gwt.inject', name: 'gin', version: '2.1.2') {
			exclude(module: 'guice')
			exclude(module: 'guice-assistedinject')
	}

	testCompile group: 'junit', name: 'junit', version: '4.12'
	testCompile group: 'com.google.gwt', name: 'gwt-dev', version: verGwt
	//testCompile group: 'com.google.gwt.gwtmockito', name: 'gwtmockito', version: '1.1.5'
	//testCompile group: 'org.easytesting', name: 'fest-assert', version: '1.4'
	//testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.5'
}

sourceSets {
	main {
		resources {
			srcDir 'src/main/resources'
			srcDir 'src/main/webapp'
		}
	}
}

gwt {
	gwtVersion = "${verGwt}"
	System.out.println("Using GWT version " + gwtVersion)

	minHeapSize = "512M";
	maxHeapSize = "2048M";

	// Defina a production build by passing -DprodBuild=true to the command line
	def prodBuild = Boolean.getBoolean("prodBuild")

	if (prodBuild) {
		System.out.println("Doing GWT production build.")
		modules 'se.umu.cs.ldbn.LdbnProd'
	} else {
		System.out.println("Doing GWT development build.")
		modules 'se.umu.cs.ldbn.LdbnDev'
	}


	logLevel = 'INFO'

	// define the local workers for GWT, we assume at least dual core, but exclude any possible HT fake CPU cores
	def gwtLocalWorkers = Math.max(2, (int) (Runtime.getRuntime().availableProcessors() / 2))
	System.out.println("Using " + gwtLocalWorkers + " GWT compiler workers.")

	// for compiler reference see
	// http://steffenschaefer.github.io/gwt-gradle-plugin/doc/latest/javadoc/de/richsource/gradle/plugins/gwt/GwtCompileOptions.html
	compiler {
		draftCompile = !prodBuild;
		strict = true;
		style = prodBuild ? 'OBF' : 'DETAILED';
		disableClassMetadata = true;
		disableCastChecking = true;
		localWorkers = gwtLocalWorkers;
	}
}

war {
	//dependsOn "gitRevision"

	archiveName = "root.war"

	excludes += [
			"**/rebel.xml", "**/*.sql", "**/*.php"
	]
}

war.doLast {
	File explodedWarDir = "${buildDir}/libs/ldbn" as File
	ant.unzip(src: war.archivePath, dest: explodedWarDir)
}

task copyWarToDocker(type: Copy, dependsOn: 'jar') {
	description 'Copies the war file to the target docker directory.'
	from war.archivePath
	into dockerDir
}

assemble.dependsOn copyWarToDocker


task gitRevision(type: Exec) {
	commandLine "git", "rev-parse", "--short", "HEAD"
}


/* Change context path (base url), otherwise defaults to name of project */
jettyRun.contextPath = ''
jettyRunWar.contextPath = ''

test {
	exclude '**/*RestIntegrationTest*'
}

task restIntegrationTest(type: Test) {
	include '**/*RestIntegrationTest*'
	doFirst {
		jettyRun.httpPort = 8080    // Port for test
		jettyRun.daemon = true
		jettyRun.execute()
	}
	doLast {
		jettyStop.stopPort = 8091   // Port for stop signal
		jettyStop.stopKey = 'stopKey'
		jettyStop.execute()
	}
}

check.dependsOn restIntegrationTest


// put GWT SDK and GWT client libraries on class path using provided scope
idea {
	module {
		scopes.PROVIDED.plus += [configurations.gwtSdk, configurations.gwt]
	}
}

eclipse {
	classpath {
		plusConfigurations += [configurations.gwtSdk, configurations.gwt]
	}
}